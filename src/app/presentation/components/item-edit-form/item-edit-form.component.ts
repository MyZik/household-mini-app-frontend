import { Component, EventEmitter, input, OnInit, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CustomButtonComponent } from '../../shared/components/custom-button';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';

interface ItemEditData {
    itemName: string;
    itemEmoji: string;
    itemId: number;
    quantity: number;
    quantityType: string;
}

@Component({
    selector: 'app-item-edit-form',
    standalone: true,
    imports: [CommonModule, CustomButtonComponent, ReactiveFormsModule],
    templateUrl: './item-edit-form.component.html',
    styleUrl: './item-edit-form.component.less',
})
export class ItemEditFormComponent implements OnInit {
    public readonly itemData = input.required<ItemEditData>();
    @Output() confirmEdit = new EventEmitter<{ 
        id: number; 
        name: string; 
        emoji: string; 
        quantity: number;
        quantityType: string;
    }>();
    @Output() cancelEdit = new EventEmitter<void>();

    editForm: FormGroup;

    protected emojis: string[] = [
        '🍎',
        '🍏',
        '🍐',
        '🍊',
        '🍋',
        '🍌',
        '🍉',
        '🍇',
        '🍓',
        '🍈',
        '🍒',
        '🍑',
        '🥭',
        '🍍',
        '🥥',
        '🥝',
        '🍅',
        '🥑',
        '🍆',
        '🥔',
        '🥕',
        '🌽',
        '🌶️',
        '🥒',
        '🥬',
        '🥦',
        '🧄',
        '🧅',
        '🍄',
        '🥜',
        '🌰',
        '🍞',
        '🥐',
        '🥖',
        '🥨',
        '🥯',
        '🥞',
        '🧇',
        '🧀',
        '🍖',
        '🍗',
        '🥩',
        '🥓',
        '🍔',
        '🍟',
        '🍕',
        '🌭',
        '🥪',
        '🌮',
        '🌯',
        '🥙',
        '🧆',
        '🥚',
        '🍳',
        '🥘',
        '🍲',
        '🥣',
        '🥗',
        '🍿',
        '🧈',
        '🧂',
        '🥫',
        '🍱',
        '🍘',
        '🍙',
        '🍚',
        '🍛',
        '🍜',
        '🍝',
        '🍠',
        '🍢',
        '🍣',
        '🍤',
        '🍥',
        '🍦',
        '🍧',
        '🍨',
        '🍩',
        '🍪',
        '🎂',
        '🍰',
        '🧁',
        '🥧',
        '🍫',
        '🍬',
        '🍭',
        '🍮',
        '🍯',
        '🍼',
        '🥛',
        '☕',
        '🍵',
        '🍶',
        '🍾',
        '🍷',
        '🍸',
        '🍹',
        '🍺',
        '🍻',
        '🥂',
        '🥃',
        '🥤',
        '🧃',
        '🧉',
        '🧊',
        '🥢',
        '🍽️',
        '🍴',
        '🥄',
        '🔪',
        '🏺',
        '🌍',
        '🌎',
        '🌏',
        '🌐',
        '🗺️',
        '🗾',
        '🧭',
        '🏔️',
        '⛰️',
        '🌋',
        '🗻',
        '🏕️',
        '🏖️',
        '🏜️',
        '🏝️',
        '🏞️',
        '🏟️',
        '🏛️',
        '🏗️',
        '🧱',
        '🏘️',
        '🏚️',
        '🏠',
        '🏡',
        '🏢',
        '🏣',
        '🏤',
        '🏥',
        '🏦',
        '🏧',
        '🏨',
        '🏩',
        '🏪',
        '🏫',
        '🏬',
        '🏭',
        '🏯',
        '🏰',
        '🗼',
        '🗽',
        '⛪',
        '🕌',
        '🛕',
        '🕍',
        '⛩️',
        '🕋',
        '⛲',
        '⛺',
        '🌁',
        '🌃',
        '🏙️',
        '🌄',
        '🌅',
        '🌆',
        '🌇',
        '🌉',
        '♨️',
        '🎠',
        '🎡',
        '🎢',
        '💈',
        '🎪',
        '🚂',
        '🚃',
        '🚄',
        '🚅',
        '🚆',
        '🚇',
        '🚈',
        '🚉',
        '🚊',
        '🚝',
        '🚞',
        '🚋',
        '🚌',
        '🚍',
        '🚎',
        '🚐',
        '🚑',
        '🚒',
        '🚓',
        '🚔',
        '🚕',
        '🚖',
        '🚗',
        '🚘',
        '🚙',
        '🚚',
        '🚛',
        '🚜',
        '🏎️',
        '🏍️',
        '🛵',
        '🦽',
        '🦼',
        '🛴',
        '🚲',
        '🛶',
        '⛵',
        '🚤',
        '🛥️',
        '🛳️',
        '⛴️',
        '🚢',
        '✈️',
        '🛩️',
        '🛫',
        '🛬',
        '🪂',
        '💺',
        '🚁',
        '🚟',
        '🚠',
        '🚡',
        '🛰️',
        '🚀',
        '🛸',
        '🛎️',
        '🧳',
        '⌛',
        '⏳',
        '⌚',
        '⏰',
        '⏱️',
        '⏲️',
        '🕰️',
        '🕛',
        '🕧',
        '🕐',
        '🕜',
        '🕑',
        '🕝',
        '🕒',
        '🕞',
        '🕓',
        '🕟',
        '🕔',
        '🕠',
        '🕕',
        '🕡',
        '🕖',
        '🕢',
        '🕗',
        '🕣',
        '🕘',
        '🕤',
        '🕙',
        '🕥',
        '🕚',
        '🕦',
        '🌑',
        '🌒',
        '🌓',
        '🌔',
        '🌕',
        '🌖',
        '🌗',
        '🌘',
        '🌙',
        '🌚',
        '🌛',
        '🌜',
        '🌡️',
        '☀️',
        '🌝',
        '🌞',
        '🪐',
        '⭐',
        '🌟',
        '🌠',
        '🌌',
        '☁️',
        '⛅',
        '⛈️',
        '🌤️',
        '🌥️',
        '🌦️',
        '🌧️',
        '⛈️',
        '🌩️',
        '🌨️',
        '❄️',
        '☃️',
        '⛄',
        '🌬️',
        '💨',
        '💧',
        '💦',
        '☔',
        '☂️',
        '🌊',
        '🌈',
    ];

    protected unitTypes = [
        {
            label: 'Stück',
            value: 'piece',
        },
        {
            label: 'Packung',
            value: 'package',
        },
        {
            label: 'Gramm',
            value: 'gram',
        },
        {
            label: 'Kilogramm',
            value: 'kilogram',
        },
        {
            label: 'Milliliter',
            value: 'milliliter',
        },
        {
            label: 'Liter',
            value: 'liter',
        },
    ];

    constructor(private fb: FormBuilder) {
        this.editForm = this.fb.group({
            name: ['', [Validators.required]],
            emoji: ['', [Validators.required]],
            unitType: ['', [Validators.required]],
        });
    }

    ngOnInit() {
        const data = this.itemData();
        this.editForm.patchValue({
            name: data.itemName,
            emoji: data.itemEmoji,
            unitType: data.quantityType,
        });
    }

    protected onConfirmEdit(): void {
        if (this.editForm.valid) {
            const formValue = this.editForm.value;
            const data = this.itemData();

            this.confirmEdit.emit({
                id: data.itemId,
                name: formValue.name,
                emoji: formValue.emoji,
                quantity: data.quantity,
                quantityType: formValue.unitType,
            });
        }
    }

    protected handleSubmit(): void {
        if (this.editForm.valid) {
            this.onConfirmEdit();
        }
    }

    protected onCancelEdit(): void {
        this.cancelEdit.emit();
    }
} 